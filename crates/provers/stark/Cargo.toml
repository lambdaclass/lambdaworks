[package]
name = "stark-platinum-prover"
rust-version = "1.66"
version.workspace = true
edition.workspace = true
license.workspace = true

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
lambdaworks-math = { workspace = true, features = [
    "std",
    "lambdaworks-serde-binary",
] }
lambdaworks-crypto = { workspace = true, features = ["std", "serde"] }

miden-core = { git = "https://github.com/lambdaclass/miden-vm", optional = true }

rand = "0.8.5"
thiserror = "1.0.38"
log = "0.4.17"
bincode = { version = "2.0.0-rc.2", tag = "v2.0.0-rc.2", git = "https://github.com/bincode-org/bincode.git" }
sha3 = "0.10.6"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
num-integer = "0.1.45"
itertools = "0.11.0"

# Parallelization crates
rayon = { version = "1.8.0", optional = true }

# wasm
wasm-bindgen = { version = "0.2", optional = true }
serde-wasm-bindgen = { version = "0.5", optional = true }
web-sys = { version = "0.3.64", features = ['console'], optional = true }
serde_cbor = { version = "0.11.1" }

[dev-dependencies]
hex = "0.4.3"
criterion = { version = "0.4", default-features = false }
env_logger = "*"
test-log = { version = "0.2.11", features = ["log"] }
assert_matches = "1.5.0"
rstest = "0.17.0"
rand = "0.8.5"
wasm-bindgen-test = "0.3.0"

[features]
test_fiat_shamir = []
instruments = []                                                     # This enables timing prints in prover and verifier
metal = ["lambdaworks-math/metal"]
parallel = ["dep:rayon", "lambdaworks-crypto/parallel"]
wasm = ["dep:wasm-bindgen", "dep:serde-wasm-bindgen", "dep:web-sys"]
winter_compatibility = ["miden-core"]

[target.'cfg(not(all(target_arch = "wasm32", target_os = "unknown")))'.dev-dependencies]
proptest = "1.2.0"

[package.metadata.wasm-pack.profile.dev]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = ['-O']

[package.metadata.wasm-pack.profile.dev.wasm-bindgen]
# Should we enable wasm-bindgen's debug assertions in its generated JS glue?
debug-js-glue = true
# Should wasm-bindgen demangle the symbols in the "name" custom section
demangle-name-section = true
# Should we emit the DWARF debug info custom sections
dwarf-debug-info = false
# Should we omit the default import path
omit-default-module-path = false

[package.metadata.wasm-pack.profile.profiling]
wasm-opt = ['-O']

[package.metadata.wasm-pack.profile.profiling.wasm-bindgen]
debug-js-glue = false
demangle-name-section = true
dwarf-debug-info = false
omit-default-module-path = false

# `wasm-opt` is on by default in for the release profile, but it can be
# disabled by setting it to `false`
[package.metadata.wasm-pack.profile.release]
wasm-opt = false

[package.metadata.wasm-pack.profile.release.wasm-bindgen]
debug-js-glue = false
demangle-name-section = true
dwarf-debug-info = false
omit-default-module-path = false
